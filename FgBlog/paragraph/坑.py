"""
<style>
.carousel-3d-slide {
  background: none;
  border: 0px;
  text-align:center;
}
</style>
</html>
"""


"""
博客文章的demo
所有文章先写这里，然后上后台代码
等数据库弄好了，进数据库
还有前段富文本编辑器
"""


'''
载入中骨架屏仿写，css动画
'''

'''
数据加载前样式错乱
把原有的数据换成空，用接口调用后端数据
接口返回数据前，页面已经加载好了，就会出现底部元素因为中间空了往上挤
然后先尝试了一下给中间的元素加最小高度
发现太空了，白色一片不好看。
然后想塞个加载中的内容在中间
一开始使用v-if判断数据为空的时候显示
这样就要用两个v-if，一个判断读条，一个判断内容
突然发现自己的子组件用了插槽
就给插槽使用了默认内容，在插槽没有东西的时候就会显示默认
这时候就只需要给插槽内容加上v-if，在还没加载的时候就会显示
<slot>
    <div>
        这里的默认内容了
    </div>
</slot>
'''

'''
css学习，画一个三角形，对话聊天头像加三角形加长方形对话样式
利用border，把内部的宽高都设为0，外部留对应方向的border不设置透明，就获得一个三角形
对话框：
一个圆角长方形设置，设置阴影，最左边放一个阴影颜色的三角形，
然后再往右偏移2px放一个对话框颜色三角形

'''

# bilibili秋天banner仿写
'''
bilibili秋天banner仿写

1、鼠标移动改变焦距
多张图片并列放在同一个高度，给不同的图片设定不同的模糊度
监听鼠标进入banner区域事件，鼠标进入后给一个初始值0
然后通过鼠标左右移动，实时改变图片的偏移和模糊度
就会出现鼠标左右移动焦距，改变模糊度，
然后就是根据移动调整改变的幅度，一点点摸出一个合理的公式
2、眨眼动画
利用定时器，设置flash函数
    flash: function () {
      setInterval(() => {
            setTimeout(() => {
                this.eyeImg = this.eyeArr[0];
            });
            setTimeout(() => {
                this.eyeImg = this.eyeArr[1];
            }, 100);
            setTimeout(() => {
                this.eyeImg = this.eyeArr[0];
            }, 200);
            setTimeout(() => {
                this.eyeImg = this.eyeArr[2];
            }, 300);
        }, 3000);
三秒眨眼一次，一次0.3秒完成
'''
# bilibili冬天banner仿写
'''
bilibili冬天banner仿写
1、将早上、中午、晚上的图叠放
2、先设置中午的透明度为0，早上为1，当前的显示为中午
3、js监听鼠标进入图片时间，进入图片记录当前鼠标的坐标为0
4、鼠标向左移动减少白天和中午的透明度，向又移动增加白天中午的透明度
5、鼠标离开恢复中午的状态，增加过渡动画时间
'''



'''
django+vue 接口正则匹配解决刷新调用接口，而不是直接在前段重新匹配路径
'''

'''
django + vue 前后端静态文件加载404
'''




'''

vue源码--数据驱动（1）从template到html
1、获取DOM
2、template模版->AST，AST-> 生成VNode--递归--栈-括号数量查询+正则语法解析，生成的是个对象{{tag:'',data:{},value:'',children:{}}
3、虚拟DOM的子节点，正则匹配value中的{{}}
4、split（'.'）正则匹配到的内容，while循环，获取data[list.shift()]的内容
5、获取到的内容更新到虚拟DOM中，再生成一个真实的DOM
6、把新生成的DOM放到页面上

'''



'''

vue源码--数据驱动（2）数据更新及柯里化函数
1、将模版生成的AST保存成缓存
2、当数据更新时，生成一个新的VNode
3、用当前真实dom对应的那个VNode做比较diff，拿到对比过有变化的数据
4、用新数据更新绑定真实DOM的VNode，同时更新html

'''



'''
vue源码--响应式原理
defineProperty：



'''


'''
vue源码--响应式原理
defineProperty：
Observer:把一个正常的对象先变成可以监听的观察者类，然后就可以监听到他的get和set方法了



'''